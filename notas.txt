https://learn.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server
==================================================
Crear entorno virtual
pip install virtualenv

virtualenv NOMBRE
cd NOMRBE\Scripts
activate
=====================================================
INIT Proyecto Django

django-admin.exe startproject NOMBRE-PROYECTO

django-admin.exe startproject miPrimerProjectDjango
=====================================================
INIT Server django

python manage.py runserver
=====================================================
Archivo urls.py controla las urls del proyecto 
Archivo settings - TEMPLATES - DIRS [Poner directorios que contienen html] 

# todas las funciones llamadas deben retornar HttpResponse
from django.http import HttpResponse

# para mostrar un archivo html
from django.shortcuts import render
=====================================================
CREAR APLICACION DJANGO dentro del proyecto

python manage.py startapp NOMBRE

Dentro de aplicacion
Crear urls.py
from django.urls import path
from . import views #DONDE ESTAN LOS HTML

urlpatterns = [
    path("listar/", views.listar),
    path("add/", views.addpais)
]

***

en proyecto/urls
Agregar INCLUDE
from django.urls import path, include
dentro de urlpattersm
        path('pais/', include('pais.urls')),
=====================================================
Archivo settings [Poner directorios que contienen archivos estaticos]
 STATICFILES_DIRS = ()

Cargar archivos estaticos en html
escribir al inicio del html
{% load static%}

Enlazar hoja de estilos a html
En el HEAD
<link rel="stylesheet" href="{% static 'css/index.html'%}" />

Llamar script JS desde html
    <script type="text/javascript" src="{% static 'jc/index.js' %}"></script>
    </body>
</html>

Integrar estilo CDN bootstrap 5 a html (NO FUNCIONA SI NO HAY INTERNET)
 <!-- LINK A ESTILO CDN DE BOOTSTRAP 5-->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

DOC BOOTSTRAP
https://getbootstrap.com/docs/5.3/components

===================================================
INCLUIR porcion de html en otro html
{% include 'menu.html' %}

Ejemplo de llamar procedure desde python
   listapaisp = odasql.listarJSON("exec uspListarPais") #usando procedures
NOTA: Las columnas pueden ser todas minusculas
=========================================================
Datatables (paginado con JS / plugins de JQuery)
https://datatables.net/

=========================================================
Enviar info al server (form)
Dentro de <form> method POST action="/url"
button type submit
input name

ERROR CON FORM POST
Forbidden (403)
CSRF verification failed. Request aborted.

Help
Reason given for failure:

    CSRF token missing.

SE TIENE QUE AGREGAR LO SIGUIENTE DENTRO DEL <form>
{% csrf_token %}
Asi Django sabe que es una llamada valida para "evitar ataques"

=========================================================
Actualmente cada consulta es SINCRONA
        Siempre que se hace una consulta re-carga todos los html y js asociados
        se transporta mucho código html del server al cliente
Asíncrono significa traer solo la data y evitar que se 
  refresque toda la página y sus archivos asociados
  transportar lo menos posible del server al app

En un JS

 fetch("/cine/listarCineAsync").then(res=>res.json())
    .then(res=>{
        alert(res);
    })

manda llamar la url cine/listarCineAsync que es un metodo que
  regresa un HttpResponse de un jsom (dumps)

==================================================================
Un <form> es para usar SYNC
puede convertirse en <div> para ASYNC
nombre y value no van en el div
el button cambia a ser type="button" en lugar de subp¿mit
agreger onclick ="" al boton

============================================================
<input> tienen evento (tag) onkeyup
cada vez que se presiona una tevcla se ejecuta el metodo

UN form envia los button y controles con el tag de name
==================================================================
TEMPLATE STRINGS
https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Template_literals

=================================================================
Hacer NUEVA APLICACION

python manage.py startapp pelicula

--------------------------------
Leer archivos de input type file
FileReader
https://developer.mozilla.org/es/docs/Web/API/FileReader

----------------------------------
Poner ALERTAS (alert()) de JS mas bonitas
Sweet Alert 

https://sweetalert2.github.io/recipe-gallery/

Para guardar codigo JS localmente hay que buscar su CDN
https://cdnjs.com/

------------------------------------------
Una eliminacion logica es cambiar de estado algun campo para recuperarlo o no
Ejemplo, bhabilitado es una columna y 1 significa recuperarlo, 0 no lo recupera
	update PELICULA
	set BHABILITADO = 0
	WHERE IDPELICULA=@idpelicula

Eliminacion fisica lo borra de la BD
-----------------------------------------------------------------

The json module in Python provides methods to work with JSON data. Here's a concise explanation of the difference between json.loads and json.dumps:

json.loads
Purpose: Converts a JSON-formatted string into a Python object (e.g., dictionary, list).
Input: A JSON string.
Output: A Python object.
Example:

Copiar código
import json

json_string = '{"name": "Alice", "age": 25}'
python_object = json.loads(json_string)
print(python_object)  # Output: {'name': 'Alice', 'age': 25}
json.dumps
Purpose: Converts a Python object into a JSON-formatted string.
Input: A Python object (e.g., dictionary, list).
Output: A JSON string.
Example:

Copiar código
import json

python_object = {"name": "Alice", "age": 25}
json_string = json.dumps(python_object)
print(json_string)  # Output: {"name": "Alice", "age": 25}
Key Difference:
json.loads: JSON to Python.
json.dumps: Python to JSON.

------------------------------------------------------
@@IDENTITY regresa ID del registro insertado
insert into TABLE(AOLUMNA1,COLUMNA2,...,COLUMNAN)
VALUES(VALOR1,VALOR2,...,VALORN)
set @variable = @@IDENTITY


-------------------------------------------------------
Problema comun cuando se llaman transacciones desde DJANGO

Error No results. Previuos SQL was not a query

En lugar de 
    exec guardarFuncion

Llamar
    SET NOCOUNT ON;exec guardarFuncion

Hace que no se muestre el total de filas afectadas en sentencias
SELECT/INSERT/UPDATE/DELETE. Dependiendo de la lógica del script o stored procedure,
el ocultar este mensaje puede redundar en una mejora de performance, tal como se menciona:

For stored procedures that contain several statements that do not return much actual data, or for procedures that contain Transact-SQL loops, setting SET NOCOUNT to ON can provide a significant performance boost, because network traffic is greatly reduced.

==================================================================
Se pueden agregar propiedades custom a etiquetas HTML
    tienen que iniciar con data-
    E.g.: <input data-campo="fecha apertura">

==============================================================
    //Por default fecha es 2025-08-06T22:51 <input type="datetime-local"
    //Para convertir en dd/mm/yyyy hh:mm se puede usar moment js

    https://cdnjs.com/libraries/moment.js
    
    var fechamoment=moment(fecha)
    var fechaformat = fechamoment.format('DD/MM/YYYY HH:mm') //04/08/2025 22:55

=======================================================================================================
Doble click elemento HTML

ondblclick="funcion()"

======================================================================
Para CIFRAR una contraseña en python

import hashlib

password = "123456" #string
pwdcifrada = hashlib.sha256(passwod.encode()).hexdigest()


---------------------------------------------------------------------
Agregar elemento HTML dentro de otro 

EL método insertAdjacentHTML() de la interfaz Element analiza la cadena de texto introducida como cadena HTML o XML e inserta al árbol DOM los nodos resultantes de dicho análisis en la posición especificada. Este método no re-analiza el elemento sobre el cual se está invocando y por lo tanto no corrompe los elementos ya existentes dentro de dicho elemento. Esto evita el paso adicional de la serialización, haciéndolo mucho más rápido que la manipulación directa con innerHTML.


Parámetros
posición
Un DOMString que representa la posición relativa al elemento, y deberá ser una de las siguientes cadenas:

'beforebegin': Antes que el propio elemento.
'afterbegin': Justo dentro del elemento, antes de su primer elemento hijo.
'beforeend': Justo dentro del elemento, después de su último elemento hijo.
'afterend': Después del propio elemento.
texto
Es la cadena a ser analizada como HTML o XML e insertada en el árbol.

Visualizacion de las posiciones
<!-- beforebegin -->
<p>
  <!-- afterbegin -->
  foo
  <!-- beforeend -->
</p>
<!-- afterend -->

----------------------------------------------------------------------------

Sesiones en Django
https://docs.djangoproject.com/en/5.2/topics/http/sessions/

    Using cookie-based sessions
    To use cookies-based sessions, set the SESSION_ENGINE setting to "django.contrib.sessions.backends.signed_cookies". The session data will be stored using Django’s tools for cryptographic signing and the SECRET_KEY setting.

    IR A PROYECTO PADRE 
        settings.py 
        AGREGAR 
            SESSION_ENGINE = django.contrib.sessions.backends.signed_cookies


    el objeto request tiene session para guardar valores durante la sesion
    Ejemplo
        request.session["idusuario"] = idusr

USUARIO PRUEBA
AlexAM
12345678